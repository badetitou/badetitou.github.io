[{"kind":1,"language":"markdown","value":"# Analyzing Java with Moose 8 and VSCode"},{"kind":1,"language":"markdown","value":"## Clone the Java project you want to analyze"},{"kind":2,"language":"pharo","value":"javaProjectFileRef := MooseEasyUtility cloneGitHubRepo: 'https://github.com/bethrobson/Head-First-Design-Patterns'."},{"kind":1,"language":"markdown","value":"## Parse Java to make FAMIX model"},{"kind":1,"language":"markdown","value":"\r\nSetup"},{"kind":2,"language":"pharo","value":"client := ZnClient new.\r\nclient\r\n    signalProgress: false;\r\n    url: 'https://github.com/moosetechnology/VerveineJ/archive/v1.0.2.zip';\r\n    downloadTo: FileLocator imageDirectory.\r\nclient isSuccess\r\n    ifTrue: [ ZipArchive new\r\n        readFrom: (FileLocator imageDirectory / 'v1.0.2.zip') asFileReference pathString ;\r\n        extractAllTo: FileLocator imageDirectory.\r\n\r\n        \"Since permissions are not preserved with ZipArchive#extractAllTo:\"\r\n        \"This line is not required in Windows system\"\r\n        LibC runCommand: 'chmod u+x ', (FileLocator imageDirectory / 'VerveineJ-1.0.1/verveinej.sh') asFileReference pathString ]\r\n    ifFalse: [ Error signal: 'Download failed.' ]"},{"kind":1,"language":"markdown","value":"Parse"},{"kind":2,"language":"pharo","value":"wizard := MooseEasyFamixMaker\r\n     generateMSETo: 'tmp/HFDP.mse' asFileReference\r\n     parsing: 'tmp/MooseEasyRepos/bethrobson__Head-First-Design-Patterns' asFileReference\r\n     with: (FileLocator imageDirectory / 'VerveineJ-1.0.2/verveinej.bat') asFileReference.\r\nwizard generateMSE."},{"kind":1,"language":"markdown","value":"## Load model of Java source (into Moose)"},{"kind":2,"language":"pharo","value":"mseFileRef := 'tmp/HFDP.mse' asFileReference. \"Generated by FamixMaker\"\r\nmseStream := mseFileRef readStream.\r\nmseStream\r\n\tifNotNil: [ \r\n\t\tmooseModel := MooseModel importFromMSEStream: mseStream. \r\n\t\tmooseModel rootFolder:\r\n      'tmp/MooseEasyRepos/bethrobson__Head-First-Design-Patterns'.\r\n\t\tmseStream close. ]\r\n\tifNil: [ self error: \r\n    'Could not load MSE file into Moose: ' , mseFileRef asString ].\r\nmseStream.\r\nmooseModel install"},{"kind":1,"language":"markdown","value":"## Analysing with Moose"},{"kind":1,"language":"markdown","value":"### Visualize a Java package in PlantUML"},{"kind":2,"language":"pharo","value":"\"Install PlantUMLPharo\"\r\nversion := 'master'.\r\nMetacello new\r\n\t\trepository: 'github://fuhrmanator/PlantUMLPharoGizmo:' , version, '/src';\r\n\t\tbaseline: 'PUGizmo';\r\n\t\tload."},{"kind":1,"language":"markdown","value":"Create the PlantUML code"},{"kind":2,"language":"pharo","value":"attribute := true.\r\nmethod := false.\r\ninheritance := true.\r\naggregation := true.\r\ncreateCheckBox := false.\r\n\r\npreference := 'set namespaceSeparator ::' , String cr\r\n\t\t, 'hide empty members' , String cr , 'scale 1' , String cr\r\n\t\t, 'left to right direction' , String cr.\r\n\r\nitems := mooseModel allModelClasses select: [:each | each mooseName beginsWith: 'headfirst::designpatterns::combining::decorator' ].\r\n\r\n\r\npUMLSource := PUGizmo\r\n\t\tplantUMLSourceForMooseJavaClasses: items\r\n\t\twithPreference: preference\r\n\t\twithRelationships:\r\n\t\t\t{attribute.\r\n\t\t\tmethod.\r\n\t\t\tinheritance.\r\n\t\t\taggregation.\r\n\t\t\tcreateCheckBox}.\r\n\r\nplantKey := pUMLSource asPlantUMLKey.\r\nserverUrl := 'https://www.plantuml.com/plantuml/img/', plantKey.  \r\nimageMorph := (ZnEasy getPng: serverUrl asUrl)."},{"kind":1,"language":"markdown","value":"### Using Pharo"},{"kind":2,"language":"pharo","value":"\"Query all classes that have more than two direct FAMIX superclasses\"\r\nclassesImplementingMoreThanOneInterface := mooseModel allModelClasses \r\n\tselect: [ :each | \r\n\t\teach directSuperclasses size > 2 ].\r\nString streamContents: [ :stream | classesImplementingMoreThanOneInterface do: [:class | stream << class name ] separatedBy: [stream << ', ' ] ]"},{"kind":2,"language":"pharo","value":"view := RTView new.\r\nFAMIXSystemNestingMap new\r\n\t\tviewNamespaces: (mooseModel allNamespaces select: [ :each | each allClasses anySatisfy: [ :c | c isStub not ] ])\r\n\t\thighlighting: {}\r\n\t\tonRaw: view.\r\nview"}]